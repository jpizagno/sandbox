import sys
import json
import pdb
import math

def main():
    """
    
    Will calculate the happiest state by matching a tweet with coordinates 
    (output_smaller.txt) file to a state location (states_coordinates_dict) 
    with a ranking of word happiness (AFINN-111.txt)
    
    """
    # USA state coordinates
    states_coordinates_dict = { 
        'WA':'-123.816666667:46.9833333333;-122.533333333:48.8;-122.666666667:47.5666666667;-120.516666667:47.0333333333;-122.283333333:47.9166666667;-119.133333333:46.2166666667;-122.933333333:46.1666666667;-119.316666667:47.2;-122.9:46.9666666667;-123.433333333:48.1166666667;-122.3:47.5333333333;-122.3:47.65;-122.3:47.45;-117.516666667:47.6333333333;-122.5:47.25;-118.283333333:46.1;-120.316666667:47.4166666667;-120.533333333:46.5666666667'
        ,'DE':'-75.4666666667:39.1333333333;-75.6:39.6666666667'
        ,'DC':'-76.0833333333:38.0833333333;-77.0333333333:38.85'
        ,'WI':'-88.3833333333:44.25;-90.9666666667:46.5666666667;-89.0333333333:42.5;-91.4833333333:44.8666666667;-88.45:43.8;-88.1333333333:44.4833333333;-91.25:43.8666666667;-89.3333333333:43.1333333333;-87.6833333333:44.1;-87.6333333333:45.1;-87.9:42.95;-87.85:42.7166666667;-87.7166666667:43.75;-89.5666666667:44.5;-88.2333333333:43.0166666667;-89.6166666667:44.9166666667'
        ,'WV':'-81.1166666667:37.7833333333;-81.2166666667:37.3;-81.6:38.3666666667;-80.35:39.2666666667;-79.85:38.8833333333;-82.5:38.4166666667;-77.9833333333:39.4;-79.9166666667:39.65;-81.5666666667:39.2666666667;-80.7:40.1166666667'
        ,'HI':'-155.083333333:19.7166666667;-157.916666667:21.3333333333;-157.766666667:21.45;-158.033333333:21.05'
        ,'FL':'-80.65:26.65;-80.5666666667:28.4833333333;-81.05:29.1833333333;-80.15:26.0666666667;-81.8666666667:26.5833333333;-80.35:27.4666666667;-82.2666666667:29.6833333333;-81.7:30.5;-81.75:24.55;-81.95:28.0333333333;-80.2666666667:25.8;-80.2833333333:25.7833333333;-82.1333333333:29.1833333333;-81.3833333333:28.55;-85.5833333333:30.0666666667;-87.2166666667:30.4166666667;-81.3333333333:29.9666666667;-83.3333333333:27.7666666667;-81.2833333333:28.7666666667;-82.55:27.3833333333;-84.3666666667:30.3833333333;-82.5333333333:27.9666666667;-80.1:26.6833333333'
        ,'WY':'-106.466666667:42.9166666667;-104.816666667:41.15;-109.066666667:44.55;-110.95:41.2666666667;-108.733333333:42.8166666667;-105.683333333:41.3166666667;-104.216666667:43.85;-107.2:41.8;-109.0:41.6;-106.966666667:44.7666666667;-104.216666667:42.0833333333'
        ,'NH':'-71.0166666667:44.05;-72.0333333333:43.0333333333;-71.5:43.2;-72.2833333333:42.9166666667;-71.05:43.05;-71.4333333333:42.9333333333;-70.8166666667:43.0666666667'
        ,'NJ':'-74.4333333333:39.3833333333;-74.0166666667:40.3166666667;-74.1666666667:40.7;-74.4333333333:40.4833333333;-74.15:40.9;-75.1833333333:40.6833333333;-74.7666666667:40.2166666667;-75.0:39.4833333333'
        ,'NM':'-106.1:32.85;-106.616666667:35.05;-104.383333333:32.7666666667;-104.266666667:32.3333333333;-103.316666667:34.3833333333;-108.233333333:36.7333333333;-108.783333333:35.5166666667;-107.9:35.1666666667;-103.216666667:32.75;-106.916666667:32.3;-106.316666667:35.8666666667;-104.5:36.75;-104.533333333:33.3;-106.083333333:35.6166666667;-108.166666667:32.6333333333;-106.883333333:34.05;-103.6:35.1833333333'
        ,'TX':'-99.6833333333:32.4166666667;-98.0333333333:27.7333333333;-100.7:35.2333333333;-97.7:30.3;-95.9666666667:29.0;-94.0166666667:29.95;-97.6666666667:28.3666666667;-101.45:32.3;-97.4333333333:25.9;-98.95:31.8;-96.55:30.6666666667;-97.5:27.7666666667;-96.4666666667:32.0833333333;-96.85:32.85;-100.783333333:29.3666666667;-97.1:33.2;-100.533333333:28.8666666667;-106.4:31.8;-97.05:32.8333333333;-94.8:29.3;-96.05:33.0666666667;-97.65:26.2333333333;-95.35:29.9666666667;-95.3666666667:29.9833333333;-95.55:30.7166666667;-97.6833333333:31.0833333333;-101.933333333:32.7;-99.45:27.5333333333;-94.7333333333:32.4666666667;-101.816666667:33.65;-94.8:31.4166666667;-98.2166666667:26.2;-102.183333333:31.95;-98.0666666667:32.7833333333;-95.6333333333:31.7833333333;-100.983333333:35.5333333333;-103.5:31.4166666667;-101.7:34.1833333333;-94.0166666667:29.95;-100.4:31.4333333333;-98.4666666667:29.5333333333;-96.6666666667:33.7166666667;-100.916666667:32.7166666667;-97.35:31.1;-95.2666666667:32.35;-99.3:34.1666666667;-96.9166666667:28.85;-97.2166666667:31.6166666667;-98.4833333333:33.9666666667'
        ,'LA':'-92.3:31.4;-91.15:30.5333333333;-89.8666666667:30.7833333333;-90.6666666667:29.5166666667;-92.0:30.2;-93.2166666667:30.1166666667;-93.3:32.6;-92.0333333333:32.5166666667;-93.0833333333:31.7666666667;-90.25:29.9833333333;-93.8166666667:32.4666666667'
        ,'NC':'-82.5333333333:35.4333333333;-80.9333333333:35.2166666667;-78.7833333333:35.8666666667;-76.1833333333:36.2666666667;-79.0166666667:35.1666666667;-77.9666666667:35.3333333333;-79.95:36.0833333333;-77.4166666667:35.6166666667;-78.4166666667:36.3666666667;-81.3833333333:35.75;-77.6166666667:34.8333333333;-79.0666666667:34.6166666667;-77.05:35.0833333333;-78.7833333333:35.8666666667;-77.8:35.9666666667;-77.9166666667:34.2666666667;-80.2166666667:36.1333333333'
        ,'ND':'-100.75:46.7666666667;-98.9:48.1166666667;-102.8:46.8;-96.8:46.9;-97.4:47.95;-98.6833333333:46.9166666667;-101.35:48.4166666667;-103.583333333:48.15'
        ,'NE':'-96.75:40.2666666667;-103.083333333:42.8333333333;-97.3333333333:41.4666666667;-96.4833333333:41.4333333333;-98.3166666667:40.9833333333;-98.4333333333:40.6;-99.0166666667:40.7333333333;-96.75:40.85;-100.633333333:40.2;-97.4333333333:41.9833333333;-100.683333333:41.1333333333;-95.9:41.3;-103.6:41.8666666667;-103.1:41.2166666667'
        ,'TN':'-84.5833333333:35.4333333333;-82.4:36.4833333333;-85.2:35.0333333333;-87.3666666667:36.55;-87.0333333333:35.6333333333;-89.4:36.0166666667;-82.8333333333:36.0666666667;-88.9166666667:35.6;-83.9833333333:35.8166666667;-90.0:35.05;-86.4666666667:34.9166666667;-86.6833333333:36.1166666667;-86.0833333333:35.3833333333'
        ,'NY':'-73.8:42.75;-73.75:42.65;-76.5333333333:42.9;-78.1833333333:43.0;-75.9833333333:42.2166666667;-78.7333333333:42.9333333333;-76.1833333333:42.6;-79.2666666667:42.4833333333;-76.9:42.1666666667;-76.9:42.75;-73.6166666667:43.3333333333;-74.35:43.0333333333;-77.7:42.35;-76.4833333333:42.45;-79.2333333333:42.1166666667;-74.0:41.9333333333;-79.25:43.15;-74.85:44.9333333333;-74.1:41.5;-73.9666666667:40.7833333333;-73.7833333333:40.65;-73.9:40.7666666667;-79.95:43.1;-78.3666666667:42.2333333333;-75.0666666667:42.5166666667;-76.55:43.4666666667;-73.4666666667:44.65;-73.9166666667:41.6333333333;-77.6666666667:43.1166666667;-75.4166666667:43.2333333333;-73.95:42.85;-72.6333333333:40.85;-76.1166666667:43.1166666667;-75.3833333333:43.15;-76.0166666667:43.9833333333'
        ,'PA':'-75.4333333333:40.65;-78.3166666667:40.3;-79.9:40.8666666667;-77.6333333333:39.9333333333;-80.1833333333:42.0833333333;-76.7666666667:40.2;-78.8333333333:40.3166666667;-76.3:40.1166666667;-80.1666666667:41.6333333333;-80.3666666667:41.0166666667;-75.25:39.8833333333;-80.2166666667:40.5;-80.0:40.45;-75.6333333333:40.3333333333;-75.7333333333:41.3333333333;-77.8666666667:40.8;-76.7666666667:40.8833333333;-79.7166666667:39.9166666667;-79.1333333333:41.85;-75.6333333333:39.9666666667;-76.9166666667:41.25;-76.75:39.9166666667'
        ,'CA':'-119.05:35.4166666667;-116.783333333:34.85;-114.716666667:33.6166666667;-118.35:34.2;-121.85:39.8;-121.983333333:37.9666666667;-117.866666667:34.0833333333;-124.2:41.7666666667;-118.133333333:33.9333333333;-116.966666667:32.8166666667;-115.666666667:32.8166666667;-117.083333333:33.1166666667;-124.1:40.9833333333;-121.933333333:38.2666666667;-119.716666667:36.7666666667;-122.5:38.0666666667;-117.783333333:33.55;-121.95:37.7;-120.566666667:34.7166666667;-118.15:33.8166666667;-118.4:33.9333333333;-118.233333333:34.05;-120.566666667:37.3833333333;-121.0:37.65;-121.9:36.6;-122.283333333:38.2166666667;-114.616666667:34.6;-122.316666667:37.8166666667;-117.416666667:33.2333333333;-117.6:34.05;-119.183333333:34.2;-118.1:34.6333333333;-116.533333333:33.8166666667;-118.15:34.15;-122.633333333:38.2333333333;-117.75:34.05;-122.3:40.5166666667;-117.183333333:34.05;-122.35:37.9333333333;-117.25:33.9;-121.5:38.5166666667;-121.6:36.6666666667;-117.266666667:34.1333333333;-117.166666667:32.7333333333;-118.466666667:34.2833333333;-122.383333333:37.6166666667;-122.433333333:37.7666666667;-121.933333333:37.3666666667;-120.716666667:35.3333333333;-117.866666667:33.75;-119.833333333:34.4333333333;-122.016666667:36.9833333333;-120.45:34.9;-118.483333333:34.0166666667;-119.083333333:34.35;-122.816666667:38.5166666667;-121.25:37.9;-123.2:39.15;-119.3:36.3333333333;-122.633333333:41.7166666667;-121.6:39.1333333333'
        ,'NV':'-119.766666667:39.1666666667;-115.783333333:40.8333333333;-114.85:39.2833333333;-115.166666667:36.0833333333;-118.55:40.0666666667;-119.783333333:39.5;-119.783333333:39.5;-117.083333333:38.0666666667;-117.8:40.9'
        ,'VA':'-78.5166666667:38.0333333333;-79.3333333333:36.5666666667;-77.4666666667:38.3;-78.9:38.45;-79.2:37.3333333333;-76.2:36.9;-77.5166666667:37.1833333333;-77.3333333333:37.5;-79.9666666667:37.3166666667;-78.9:38.2666666667;-78.1666666667:39.2'
        ,'CO':'-105.866666667:37.45;-105.266666667:40.0;-104.716666667:38.8166666667;-104.866666667:39.75;-107.883333333:37.2833333333;-105.083333333:40.75;-108.533333333:39.1166666667;-104.633333333:40.4333333333;-103.5:38.05;-106.3:39.25;-104.483333333:38.3;-103.2:40.6166666667;-104.333333333:37.25'
        ,'AK':'-150.016666667:61.1666666667;-156.783333333:71.3;-147.866666667:64.8166666667;-134.583333333:58.3666666667;-152.483333333:57.75;-165.433333333:64.5'
        ,'AL':'-85.95:32.95;-85.85:33.5833333333;-85.5:32.6;-86.75:33.5666666667;-86.9833333333:34.6166666667;-85.45:31.3166666667;-87.6666666667:34.8;-86.0:34.0166666667;-86.5833333333:34.7;-88.25:30.6833333333;-88.25:30.6666666667;-86.3666666667:32.3833333333;-87.9833333333:32.3333333333;-86.1:33.45;-87.6166666667:33.2166666667'
        ,'AR':'-89.95:35.95;-92.8166666667:33.6;-92.8166666667:33.2166666667;-94.1666666667:36.0;-94.3666666667:35.3333333333;-93.1:34.4833333333;-90.7:35.8333333333;-92.2333333333:34.7333333333;-92.0833333333:34.3;-93.9833333333:33.45'
        ,'VT':'-72.5166666667:44.2;-73.15:44.4666666667;-72.9666666667:43.6'
        ,'IL':'-88.3333333333:41.75;-89.85:38.55;-88.95:40.4833333333;-89.25:37.7833333333;-88.2833333333:40.0333333333;-87.75:41.7833333333;-87.9:41.9833333333;-87.6333333333:41.8833333333;-87.6:40.2;-88.8666666667:39.8333333333;-89.4833333333:41.8333333333;-88.2666666667:42.0333333333;-89.6166666667:42.3;-90.4333333333:40.9333333333;-89.4:38.8833333333;-88.1666666667:41.5166666667;-87.9166666667:41.0833333333;-89.1:41.3166666667;-90.6666666667:40.4666666667;-90.5166666667:41.45;-88.8666666667:38.3166666667;-89.6833333333:40.6666666667;-91.2:39.95;-88.1333333333:40.3;-89.05:42.35;-89.6666666667:39.8333333333;-87.8833333333:42.35'
        ,'GA':'-84.0833333333:31.6;-84.2333333333:32.05;-83.3166666667:33.95;-84.4333333333:33.65;-81.9666666667:33.3666666667;-81.4833333333:31.25;-84.9333333333:32.5166666667;-84.95:34.5666666667;-82.9:32.3333333333;-83.6833333333:34.1833333333;-84.2666666667:33.2166666667;-85.0666666667:33.0166666667;-83.65:32.7;-84.5166666667:33.9166666667;-81.2:32.1333333333;-83.2:30.9666666667;-82.4:31.25'
        ,'IN':'-85.6166666667:40.1;-86.5:38.85;-86.6166666667:39.1333333333;-85.9:39.2666666667;-86.9:40.05;-87.5333333333:38.05;-85.2:41.0;-85.8:41.5333333333;-87.25:41.5333333333;-85.5:40.8833333333;-86.2833333333:39.7333333333;-85.75:38.2833333333;-86.05:40.4166666667;-86.0833333333:40.0333333333;-86.7166666667:41.6;-85.6833333333:40.4833333333;-85.35:40.1833333333;-86.15:40.65;-84.8333333333:39.7666666667;-85.7833333333:39.5166666667;-86.3166666667:41.7;-87.3:39.45;-87.0333333333:41.5166666667;-87.5333333333:38.6833333333'
        ,'IA':'-93.8:42.0333333333;-91.1166666667:40.7833333333;-91.7:41.8833333333;-90.2166666667:41.8333333333;-95.8166666667:41.3333333333;-93.65:41.5333333333;-90.7:42.4;-94.1833333333:42.55;-91.55:41.6333333333;-91.4:40.4;-92.9333333333:42.0666666667;-93.3333333333:43.15;-93.0333333333:41.6833333333;-92.45:41.1;-96.3833333333:42.4;-92.4:42.55'
        ,'OK':'-96.6833333333:34.7833333333;-99.2666666667:34.65;-97.0166666667:34.3;-96.0:36.75;-97.9166666667:35.05;-97.9166666667:36.35;-98.4166666667:34.5666666667;-95.9166666667:34.8333333333;-95.3666666667:35.6666666667;-97.4833333333:35.25;-97.6:35.4;-97.1:36.7333333333;-96.6666666667:35.2333333333;-97.0833333333:36.1666666667;-95.9:36.2;-99.5166666667:36.6'
        ,'AZ':'-109.6:31.45;-111.666666667:35.1333333333;-110.333333333:31.5833333333;-114.016666667:35.2;-110.916666667:31.35;-112.016666667:33.4333333333;-112.433333333:34.65;-110.933333333:32.1166666667;-110.733333333:35.0166666667;-114.616666667:32.65'
        ,'ID':'-116.216666667:43.5666666667;-113.766666667:42.5333333333;-116.816666667:47.7666666667;-112.066666667:43.5166666667;-117.016666667:46.3833333333;-116.966666667:46.7333333333;-115.9:43.0333333333;-112.6:42.9166666667;-114.483333333:42.4833333333'
        ,'CT':'-73.1833333333:41.1833333333;-72.65:41.7333333333;-73.9166666667:41.3166666667;-72.1:41.35;-73.4166666667:41.1166666667;-72.0666666667:41.5333333333;-73.0666666667:41.5833333333;-72.6833333333:41.9333333333'
        ,'ME':'-69.8:44.3166666667;-68.8333333333:44.8;-68.0166666667:46.8666666667;-70.25:44.0333333333;-68.7:45.65;-70.3166666667:43.65;-69.6666666667:44.5333333333'
        ,'MD':'-76.6666666667:39.1833333333;-76.4166666667:39.3333333333;-78.7666666667:39.6166666667;-77.4166666667:39.45;-77.7333333333:39.7;-75.5:38.3333333333'
        ,'MA':'-71.0333333333:42.3666666667;-71.6833333333:42.4;-71.1333333333:41.7166666667;-71.4166666667:42.2833333333;-70.6833333333:42.5833333333;-72.0666666667:42.05;-71.1666666667:42.7;-71.3166666667:42.65;-70.9666666667:41.6833333333;-73.3:42.4333333333;-72.5333333333:42.2;-71.0666666667:41.9;-71.8666666667:42.2666666667'
        ,'OH':'-81.4333333333:40.9166666667;-80.8:41.85;-82.1:39.3333333333;-83.6333333333:41.3833333333;-81.5833333333:40.0666666667;-83.0:39.35;-84.5166666667:39.15;-81.85:41.4;-82.8833333333:40.0;-84.2166666667:39.9;-84.3833333333:41.2833333333;-83.6666666667:41.0166666667;-83.1166666667:41.3333333333;-84.5833333333:39.4;-82.6333333333:39.7333333333;-84.0333333333:40.7;-82.5166666667:40.8166666667;-83.1666666667:40.6;-84.4166666667:39.5166666667;-82.4666666667:40.0166666667;-82.6166666667:41.2666666667;-82.9166666667:38.75;-82.7166666667:41.45;-83.8333333333:39.8333333333;-80.6333333333:40.3833333333;-83.8:41.6;-80.85:41.3333333333;-81.9166666667:40.7833333333;-80.6666666667:41.2666666667;-81.9:39.95'
        ,'UT':'-113.1:37.7;-111.816666667:41.75;-109.6:38.6;-112.016666667:41.2;-110.833333333:39.6166666667;-111.716666667:40.2166666667;-112.083333333:38.7666666667;-113.516666667:37.0333333333;-111.966666667:40.7666666667;-109.516666667:40.45'
        ,'MO':'-89.5833333333:37.2333333333;-92.3666666667:38.9666666667;-90.4:37.7666666667;-91.35:39.7;-92.1833333333:38.5666666667;-94.5:37.15;-94.5833333333:39.1166666667;-92.55:40.1;-91.9:39.1833333333;-92.4333333333:39.4;-90.4166666667:36.7666666667;-91.7166666667:37.9833333333;-94.9166666667:39.7666666667;-90.3833333333:38.75;-90.6333333333:38.65;-89.6:36.8833333333;-93.55:38.7166666667;-89.6:36.8833333333;-93.3833333333:37.2333333333'
        ,'MN':'-93.35:43.65;-95.3833333333:45.8666666667;-94.9333333333:47.5166666667;-94.1333333333:46.4;-92.1833333333:46.8333333333;-93.2666666667:44.3;-96.0666666667:46.2666666667;-93.3833333333:48.5666666667;-93.9833333333:44.15;-93.2166666667:44.8833333333;-92.5:43.9166666667;-94.1833333333:45.5833333333;-92.55:47.5;-95.0833333333:45.1166666667;-91.6333333333:44.05'
        ,'MI':'-84.0166666667:41.9166666667;-83.4333333333:45.0666666667;-85.25:42.3166666667;-86.4333333333:42.1333333333;-83.0166666667:42.4166666667;-87.0833333333:45.7333333333;-83.7333333333:42.9666666667;-85.5166666667:42.8833333333;-86.1:42.7;-84.4666666667:42.2666666667;-85.6:42.2833333333;-84.6:42.7833333333;-87.4:46.5666666667;-84.7666666667:43.5833333333;-86.2333333333:43.1666666667;-83.4166666667:42.6666666667;-82.4166666667:42.9833333333;-84.0833333333:43.5333333333;-84.3666666667:46.4666666667;-85.5833333333:44.75;-83.5333333333:42.2333333333'
        ,'RI':'-71.3333333333:41.5;-71.4333333333:41.7333333333'
        ,'KS':'-95.1166666667:39.5666666667;-95.4833333333:37.6666666667;-99.9666666667:37.7666666667;-96.8333333333:37.8166666667;-96.2:38.3333333333;-100.733333333:37.9333333333;-101.7:39.3666666667;-98.8666666667:38.35;-97.8666666667:38.0666666667;-100.966666667:37.05;-96.7666666667:39.05;-95.5166666667:37.3333333333;-98.8166666667:38.8666666667;-97.65:38.8;-95.6333333333:39.0666666667;-97.4166666667:37.65'
        ,'MT':'-108.533333333:45.8;-111.15:45.7833333333;-112.5:45.95;-112.366666667:48.6166666667;-106.533333333:48.4166666667;-104.8:47.1333333333;-111.366666667:47.4833333333;-109.666666667:48.5666666667;-112.0:46.6;-114.266666667:48.3;-109.45:47.0666666667;-110.433333333:45.7;-105.866666667:46.4333333333;-114.083333333:46.9166666667'
        ,'MS':'-88.9166666667:30.4166666667;-90.5666666667:34.2;-88.45:33.65;-90.9833333333:33.4833333333;-90.0833333333:33.5;-89.25:31.2666666667;-90.0833333333:32.3166666667;-89.1666666667:31.6666666667;-90.4666666667:31.25;-88.75:32.3333333333;-91.3833333333:31.55;-88.7666666667:34.2666666667;-90.7833333333:32.4'
        ,'SC':'-82.7166666667:34.5;-80.0333333333:32.9;-79.9666666667:32.9;-81.1166666667:33.95;-79.7166666667:34.1833333333;-79.2833333333:33.3833333333;-82.2166666667:34.9;-82.1166666667:34.1666666667;-80.8666666667:33.5;-80.9666666667:34.9833333333;-82.0:34.9666666667;-80.3666666667:33.9'
        ,'KY':'-82.7333333333:38.55;-86.4666666667:35.9666666667;-84.1:36.95;-84.6666666667:39.05;-87.4833333333:36.6666666667;-84.6:38.0333333333;-85.7333333333:38.1833333333;-87.4833333333:37.3166666667;-87.1666666667:37.75;-88.7666666667:37.0666666667'
        ,'OR':'-123.116666667:44.6333333333;-123.883333333:46.15;-117.816666667:44.8333333333;-121.316666667:44.0666666667;-123.283333333:44.5;-123.216666667:44.1166666667;-123.316666667:42.4333333333;-121.733333333:42.15;-122.866666667:42.3666666667;-118.85:45.6833333333;-122.6:45.6;-122.666666667:45.5333333333;-123.366666667:43.2333333333;-123.016666667:44.9166666667;-121.2:45.6'
        ,'SD':'-98.4333333333:45.45;-96.8:44.3;-98.2166666667:44.3833333333;-98.0166666667:43.6833333333;-100.283333333:44.3833333333;-103.066666667:44.05;-96.7333333333:43.5666666667;-97.15:44.9166666667;-97.3833333333:42.9166666667'
    }

    # State Abbreviations
    states = {
        'AK': 'Alaska',
        'AL': 'Alabama',
        'AR': 'Arkansas',
        'AS': 'American Samoa',
        'AZ': 'Arizona',
        'CA': 'California',
        'CO': 'Colorado',
        'CT': 'Connecticut',
        'DC': 'District of Columbia',
        'DE': 'Delaware',
        'FL': 'Florida',
        'GA': 'Georgia',
        'GU': 'Guam',
        'HI': 'Hawaii',
        'IA': 'Iowa',
        'ID': 'Idaho',
        'IL': 'Illinois',
        'IN': 'Indiana',
        'KS': 'Kansas',
        'KY': 'Kentucky',
        'LA': 'Louisiana',
        'MA': 'Massachusetts',
        'MD': 'Maryland',
        'ME': 'Maine',
        'MI': 'Michigan',
        'MN': 'Minnesota',
        'MO': 'Missouri',
        'MP': 'Northern Mariana Islands',
        'MS': 'Mississippi',
        'MT': 'Montana',
        'NA': 'National',
        'NC': 'North Carolina',
        'ND': 'North Dakota',
        'NE': 'Nebraska',
        'NH': 'New Hampshire',
        'NJ': 'New Jersey',
        'NM': 'New Mexico',
        'NV': 'Nevada',
        'NY': 'New York',
        'OH': 'Ohio',
        'OK': 'Oklahoma',
        'OR': 'Oregon',
        'PA': 'Pennsylvania',
        'PR': 'Puerto Rico',
        'RI': 'Rhode Island',
        'SC': 'South Carolina',
        'SD': 'South Dakota',
        'TN': 'Tennessee',
        'TX': 'Texas',
        'UT': 'Utah',
        'VA': 'Virginia',
        'VI': 'Virgin Islands',
        'VT': 'Vermont',
        'WA': 'Washington',
        'WI': 'Wisconsin',
        'WV': 'West Virginia',
        'WY': 'Wyoming'
    }
    
    # check on inputs
    if len(sys.argv)==1:
        print "please provide mood file and tweet file like so:  "
        print "python AFINN-111.txt output_smaller.txt"
        exit()
    if sys.argv[1] != "AFINN-111.txt":
        print "Error:  need file AFINN-111.txt"
        exit()
    if sys.argv[2].endswith(".txt") == False:
        print "Error:  need file with state tweets"
        exit()
        
    # assign file
    sent_file = open(sys.argv[1])
    tweet_file = open(sys.argv[2])
    
    # first create dictionary with scores
    afinnfile = open(sys.argv[1]) #open("AFINN-111.txt")
    scores = {} # initialize an empty dictionary
    for line in afinnfile:
        term, score  = line.split("\t")  # The file is tab-delimited. "\t" means "tab character"
        scores[term.decode('utf-8')] = int(score)  # Convert the score to an integer.
    afinnfile.close()
    
    # for each state, have a sum of sentimetnts
    state_happy_dict = {}

    # cycle through tweets in file
    for line in tweet_file:
        line_processed_dict = json.loads(line)

        sum_sentiment_line = 0
        
        state_here = None

        #calculate score for this tweet.
        if "text" in line_processed_dict.keys():
            result = line_processed_dict["text"]
            words = result.split()
            for term in scores.keys():
                for word in words:
                    if word == term:
                        sum_sentiment_line += scores[term]
                        

            # find state in this tweet
            state_found = False
            state_here = None 
            # try easiest first
            # line_processed_dict["place"]["full_name"]
            if line_processed_dict["place"] is not None:
                if line_processed_dict["place"]["full_name"] is not None:
                    # format:  u'Syracuse, NY'
                    city_state = line_processed_dict["place"]["full_name"]
                    for state_abbr in states.keys():
                        if city_state.count(state_abbr) > 0:
                            state_here = state_abbr
                            state_found = True
                            
            # there are several ways to find the state from the tweet
            # try to use USER
            if state_found==False:
                state_here = None
                
            # lastly try to convert the coordinates to a sate:
            if state_found==False:
                if line_processed_dict["coordinates"]  is not None:
                    # have coordinates
                    long = float(line_processed_dict["coordinates"]["coordinates"][0])
                    latt = float(line_processed_dict["coordinates"]["coordinates"][1])
                    min_distance = 1.E36
                    state_here = "NOT FOUND"
                    for abbr,coords in states_coordinates_dict.items():
                        # value format 123.816666667:46.9833333333;-122.533333333:48.8;-122.666666667:47.5666666667;
                        coords_list = coords.split(";")
                        for coords_test in coords_list:
                            long_test = float(coords_test.split(":")[0])
                            latt_test = float(coords_test.split(":")[1])
                            diff = math.sqrt( (long_test-long)*(long_test-long) + (latt_test-latt)*(latt_test-latt) )
                            if diff < min_distance:
                                min_distance = diff
                                state_here = abbr
                                state_found = True
                                
            if state_found:
                # for this line, we now have a State
                if state_here in state_happy_dict.keys():
                    state_happy_dict[state_here] += sum_sentiment_line
                else:
                    state_happy_dict[state_here] = sum_sentiment_line
            
    #print state_happy_dict        
    happiest = -1E36
    happy_state = "Error"
    for state in state_happy_dict.keys():
        if state_happy_dict[state] > happiest:
            happiest = state_happy_dict[state]
            happy_state = state
    print happy_state
    
if __name__ == '__main__':
    main()

